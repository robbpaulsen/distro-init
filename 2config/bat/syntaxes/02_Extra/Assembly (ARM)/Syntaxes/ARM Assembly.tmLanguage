<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>s</string>
		<string>S</string>
	</array>
	<key>name</key>
	<string>ARM Assembly</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>match</key>
			<string>@.*$</string>
			<key>name</key>
			<string>comment.line</string>
		</dict>
		<dict>
			<key>match</key>
			<string>//.*$</string>
			<key>name</key>
			<string>comment.line</string>
		</dict>
		<dict>
			<key>match</key>
			<string>;.*$</string>
			<key>name</key>
			<string>comment.line</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*\#\s*if\s+0\b</string>
			<key>end</key>
			<string>^\s*\#\s*endif\b</string>
			<key>name</key>
			<string>comment.preprocessor</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
			^\s*\#\s*(define)\s+             # define
			((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
			(?:                              # and optionally:
			    (\()                         # an open parenthesis
			        (
			            \s* \g&lt;id&gt; \s*       # first argument
			            ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
			            (?:\.\.\.)?          # varargs ellipsis?
			        )
			    (\))                         # a close parenthesis
			)?
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.c</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.c</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.c</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.macro.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(error|warning)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(include|import)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>((?i)([xw][0-9]|[xw]1[0-9]||[xw]2[0-9]|[wx]30|wzr|xzr|wsp|fpsr|fpcr|[rcp]1[0-5]|[rcp][0-9]|a[1-4]|v[1-8]|sl|sb|fp|ip|sp|lr|(c|s)psr(_c)?|pc|[sd]3[0-1]|[sd][12][0-9]|[sd][0-9]|fpsid|fpscr|fpexc|q3[0-1]|q2[0-9]|q1[0-9]|q[0-9]|APSR_nzcv|sy)!?(?-i))?\b</string>
			<key>name</key>
			<string>storage.other.register</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\.(?i)(globl|global|macro|endm|purgem|if|elseif|else|endif|section|text|arm|align|balign|irp|rept|endr|req|unreq|error|short|func|endfunc|hidden|type|fpu|arch|code|altmacro|object_arch|word|int|string)(?-i)\b</string>
			<key>name</key>
			<string>keyword.control.directive</string>
		</dict>
		<dict>
			<key>match</key>
			<string>armv(2a?|3m?|4t?|5t?e?6(j|t2|zk?|-m)?|7v?e?(-(a|r|m))?|8-a(\+crc)?)</string>
			<key>name</key>
			<string>keyword.control.arch.arm</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)\b((?i)
				(
					(bf(c|i)|(u|s)bfx|(u|s)xta?(h|b)?) |
					(v(add|cvt|sub|mov|trn|cmp|div|qdmulh|mrs|mul|ld1|qadd|qshrun|st[1234]|addw|mull|mlal|rshrn|swp|qmovun)|qmovun)(\.([isup]?8|[isupf]?16|[isuf]?32|[isu]?64))* |
					(and|m(rs|sr)|eor|sub|rsb|add|adc|sbc|rsc|tst|teq|cmp|cmn|orr|mov|bic|mvn |
						(neg) |
						(lsr|lsl|ror|asr) # shift ops either pseudo ops or actual shifts
					)s? |
					(mul|mla|mull|smlabb) |
					(mov(w|t)) |
					rev(8|16)? |
					(pld|adr|adrl|vswp)
				)
				(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?(?-i))?\b</string>
			<key>name</key>
			<string>support.function.mnemonic.arithmetic</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)\b((?i)(
					swi|svc|wfi|
					dmb | clrex | dsb | isb |
					v(ldr|str|push|pop) |
					(push|pop) |
					(st|ld)(
					    p |
						r(ex|s?(h|b)|d)? |
						m(
							(f|e)(d|a) |
							(d|i)(b|a)
						)?
					) |
					b(l|x|lx|lr|r)? |
					(i|e)?ret|
					b\.(eq|ne|hs|cs|lo|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|nv)+ |					
					(c|t)?bn?z|
				)+(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?(?-i))\b</string>
			<key>name</key>
			<string>support.function.mnemonic.memory</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((?i)(def(b|w|s)|equ|(include|get)(\s+([a-zA-Z_]+[0-9a-zA-Z_]*|[0-9]+[a-zA-Z_]+[0-9a-zA-Z_]*?)\.s)?)?(?-i))\b</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((?i)(align)(?-i))?\b</string>
			<key>name</key>
			<string>storage.type.c.memaccess</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\s+\".+\"</string>
			<key>name</key>
			<string>string</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((?i)nop(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?(?-i))?\b</string>
			<key>name</key>
			<string>comment.nop</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\s\[</string>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.c</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
			<key>name</key>
			<string>storage.type.c.memaccess</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\b|\s+)\=\b</string>
			<key>name</key>
			<string>keyword.control.evaluation</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\b|\s+)(\#)?-?(0x|&amp;)[0-9a-fA-F_]+\b</string>
			<key>name</key>
			<string>constant.numeric.hex</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\b|\s+)\#-?[0-9a-zA-Z_]+\b</string>
			<key>name</key>
			<string>constant.numeric.literal</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\b|\s+)[0-9]+\b</string>
			<key>name</key>
			<string>constant.numeric.dec</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([a-zA-Z_]+[0-9a-zA-Z_]*|[0-9]+[a-zA-Z_]+[0-9a-zA-Z_]*)\b</string>
			<key>name</key>
			<string>meta.function.source.arm.label</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.asm.arm</string>
	<key>uuid</key>
	<string>433AE307-8DE5-4856-8113-37659B1AFDA4</string>
</dict>
</plist>
